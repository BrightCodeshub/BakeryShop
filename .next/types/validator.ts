// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\app\auth\signin\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\auth\\signin\\page.js")
  handler satisfies AppPageConfig<"/auth/signin">
}

// Validate ..\..\app\auth\signup\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\auth\\signup\\page.js")
  handler satisfies AppPageConfig<"/auth/signup">
}

// Validate ..\..\app\dashboard\customer\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\dashboard\\customer\\page.js")
  handler satisfies AppPageConfig<"/dashboard/customer">
}

// Validate ..\..\app\dashboard\manager\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\dashboard\\manager\\page.js")
  handler satisfies AppPageConfig<"/dashboard/manager">
}

// Validate ..\..\app\menu\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\menu\\page.js")
  handler satisfies AppPageConfig<"/menu">
}

// Validate ..\..\app\order\cart\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\order\\cart\\page.js")
  handler satisfies AppPageConfig<"/order/cart">
}

// Validate ..\..\app\order\checkout\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\order\\checkout\\page.js")
  handler satisfies AppPageConfig<"/order/checkout">
}

// Validate ..\..\app\order\success\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\order\\success\\page.js")
  handler satisfies AppPageConfig<"/order/success">
}

// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\app\unauthorized\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\unauthorized\\page.js")
  handler satisfies AppPageConfig<"/unauthorized">
}

// Validate ..\..\app\api\stripe\create-checkout-session\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\stripe\\create-checkout-session\\route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/create-checkout-session">
}

// Validate ..\..\app\api\stripe\webhook\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\stripe\\webhook\\route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/webhook">
}

// Validate ..\..\app\auth\confrm\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\auth\\confrm\\route.js")
  handler satisfies RouteHandlerConfig<"/auth/confrm">
}





// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
